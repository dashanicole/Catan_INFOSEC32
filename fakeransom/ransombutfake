import os
import base64
from getpass import getpass
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes

def generate_key(password, salt):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000
    )
    key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
    return Fernet(key)

def encrypt_file(filename, password):
    salt = os.urandom(16)
    fernet = generate_key(password, salt)

    with open(filename, 'rb') as f:
        data = f.read()

    encrypted = fernet.encrypt(data)

    with open(filename, 'wb') as f:
        f.write(salt + encrypted)

    print(f"Encrypted: {filename}")

def decrypt_file(filename, password):
    with open(filename, 'rb') as f:
        salt = f.read(16)
        encrypted_data = f.read()

    fernet = generate_key(password, salt)

    try:
        decrypted = fernet.decrypt(encrypted_data)
        with open(filename, 'wb') as f:
            f.write(decrypted)
        print(f"Decrypted: {filename}")
    except:
        print(f"Failed to decrypt: {filename}")

def main():
    action = input("Choose action (encrypt/decrypt): ").lower()
    path = input("Enter file or folder path: ")
    password = getpass(f"Enter {action}ion password: ")

    if os.path.isfile(path):
        if action == "encrypt":
            encrypt_file(path, password)
        elif action == "decrypt":
            decrypt_file(path, password)
        else:
            print("Invalid action.")
    elif os.path.isdir(path):
        for root, dirs, files in os.walk(path):
            for file in files:
                file_path = os.path.join(root, file)
                try:
                    if action == "encrypt":
                        encrypt_file(file_path, password)
                    elif action == "decrypt":
                        decrypt_file(file_path, password)
                except Exception as e:
                    print(f"Error processing {file_path}: {str(e)}")
        print(f"Completed processing all files in: {path}")
    else:
        print("Invalid path specified.")

if __name__ == "__main__":
    main()